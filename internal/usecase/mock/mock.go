// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/lualfe/portsservice/internal/entity"
	portsstream "github.com/lualfe/portsservice/pkg/portsstream"
)

// MockportsRepo is a mock of portsRepo interface.
type MockportsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockportsRepoMockRecorder
}

// MockportsRepoMockRecorder is the mock recorder for MockportsRepo.
type MockportsRepoMockRecorder struct {
	mock *MockportsRepo
}

// NewMockportsRepo creates a new mock instance.
func NewMockportsRepo(ctrl *gomock.Controller) *MockportsRepo {
	mock := &MockportsRepo{ctrl: ctrl}
	mock.recorder = &MockportsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockportsRepo) EXPECT() *MockportsRepoMockRecorder {
	return m.recorder
}

// UpsertPort mocks base method.
func (m *MockportsRepo) UpsertPort(ctx context.Context, port entity.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPort", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPort indicates an expected call of UpsertPort.
func (mr *MockportsRepoMockRecorder) UpsertPort(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPort", reflect.TypeOf((*MockportsRepo)(nil).UpsertPort), ctx, port)
}

// MockportsStreamer is a mock of portsStreamer interface.
type MockportsStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockportsStreamerMockRecorder
}

// MockportsStreamerMockRecorder is the mock recorder for MockportsStreamer.
type MockportsStreamerMockRecorder struct {
	mock *MockportsStreamer
}

// NewMockportsStreamer creates a new mock instance.
func NewMockportsStreamer(ctrl *gomock.Controller) *MockportsStreamer {
	mock := &MockportsStreamer{ctrl: ctrl}
	mock.recorder = &MockportsStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockportsStreamer) EXPECT() *MockportsStreamerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockportsStreamer) Start(ctx context.Context, r io.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx, r)
}

// Start indicates an expected call of Start.
func (mr *MockportsStreamerMockRecorder) Start(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockportsStreamer)(nil).Start), ctx, r)
}

// Stream mocks base method.
func (m *MockportsStreamer) Stream() chan portsstream.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream")
	ret0, _ := ret[0].(chan portsstream.Result)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockportsStreamerMockRecorder) Stream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockportsStreamer)(nil).Stream))
}
